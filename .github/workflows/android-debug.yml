name: build-debug

on:
  push:
    branches: [ main ]
    paths:
      - "**.py"
      - "buildozer.spec"
      - ".github/workflows/android-debug.yml"
      - "requirements.txt"
      - "pyproject.toml"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  android-debug:
    runs-on: ubuntu-24.04
    env:
      GRADLE_OPTS: -Xmx4g -Dorg.gradle.daemon=false
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PIP_NO_PYTHON_VERSION_WARNING: "1"
      BUILDOZER_WARN_ON_ROOT: "0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: REACHED: after checkout — show tree
        run: |
          pwd && ls -la
          test -f buildozer.spec && echo "FOUND buildozer.spec" || (echo "buildozer.spec MISSING" && exit 1)

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Set up Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential git zip unzip \
            python3-venv python3-pip \
            libffi-dev libssl-dev libbz2-dev libsqlite3-dev zlib1g-dev \
            libncurses5-dev libncursesw5-dev libreadline-dev libgdbm-dev liblzma-dev \
            autoconf automake libtool pkg-config cmake curl


      - name: Restore caches
        uses: actions/cache@v4
        with:
          path: |
            .buildozer
            ~/.buildozer
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: Linux-buildozer-${{ hashFiles('buildozer.spec') }}-${{ hashFiles('requirements.txt', 'pyproject.toml') }}
          restore-keys: |
            Linux-buildozer-

      - name: Create venv & install tools
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip setuptools wheel
          pip install "cython>=3.0" buildozer

      # Minimal-SDK über Action (installiert platform-tools; setzt /usr/local/lib/android/sdk)
      - name: Install Android SDK skeleton
        uses: android-actions/setup-android@v3
        with:
          packages: |
            platform-tools

      - name: REACHED: verify sdkmanager & pin API/Build-Tools
        shell: bash
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          set -euxo pipefail
          echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}"
          echo "JAVA_HOME=${JAVA_HOME}"

          # sdkmanager pfad sicherstellen oder cmdline-tools nachinstallieren
          SDKROOT="${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}"
          mkdir -p "${SDKROOT}/cmdline-tools" "${SDKROOT}/platforms" "${SDKROOT}/build-tools"

          if [ ! -x "${SDKROOT}/cmdline-tools/latest/bin/sdkmanager" ]; then
            echo "Installing cmdline-tools latest…"
            curl -L -o /tmp/cmdtools.zip "https://dl.google.com/android/repository/commandlinetools-linux-12266719_latest.zip"
            unzip -q /tmp/cmdtools.zip -d "${SDKROOT}/cmdline-tools"
            mv "${SDKROOT}/cmdline-tools/cmdline-tools" "${SDKROOT}/cmdline-tools/latest"
            chmod +x "${SDKROOT}/cmdline-tools/latest/bin/"*
          fi
          export PATH="${SDKROOT}/cmdline-tools/latest/bin:${SDKROOT}/platform-tools:${PATH}"

          which sdkmanager
          sdkmanager --version || true

          yes | sdkmanager --licenses

          # exakt pinnen
          sdkmanager --install "platforms;android-34" "build-tools;34.0.0" "platform-tools"

          # Unerwünschte 36.x Aufräumen (falls Action was nachzieht)
          rm -rf "${SDKROOT}/build-tools/36."* || true

          echo "== INSTALLED BUILD-TOOLS =="
          ls -1 "${SDKROOT}/build-tools" || true
          echo "== INSTALLED PLATFORMS =="
          ls -1 "${SDKROOT}/platforms" || true

      - name: REACHED: start buildozer
        shell: bash
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          set -o pipefail
          source .venv/bin/activate
          echo "Buildozer version:"; buildozer --version || true
          # Log-Datei VORAB anlegen, damit sie im Fehlerfall existiert
          : > buildozer.log
          # Verbose Build
          buildozer -v android debug 2>&1 | tee -a buildozer.log

      - name: Diagnostics (list outputs)
        if: always()
        run: |
          echo "== tree bin (if exists) =="
          (ls -la bin && find bin -maxdepth 2 -type f) || echo "no bin dir"
          echo "== search for APK/AAB under .buildozer =="
          find .buildozer -type f \( -name "*.apk" -o -name "*.aab" -o -name "*.log" \) -printf "%p\n" || true
          echo "== tail buildozer.log =="
          (tail -n 200 buildozer.log) || true

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            buildozer.log
            .buildozer/android/platform/*.txt
            .buildozer/android/platform/*/gradle-*.log
          if-no-files-found: warn

      - name: Upload APK/AAB
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spectro-android-outputs
          path: |
            bin/**/*.apk
            bin/**/*.aab
            .buildozer/**/outputs/**/*.apk
            .buildozer/**/outputs/**/*.aab
            .buildozer/android/platform/build-*/dists/*/bin/*.apk
          if-no-files-found: warn
